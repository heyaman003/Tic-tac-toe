// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  isOnline  Boolean  @default(false)
  socketId  String?
  
  // ELO and Stats
  elo       Int      @default(1000)
  totalWins Int      @default(0)
  totalLoss Int      @default(0)
  totalDraws Int     @default(0)
  currentStreak Int   @default(0)
  bestStreak    Int   @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  gamesAsPlayer1  Game[] @relation("Player1Games")
  gamesAsPlayer2  Game[] @relation("Player2Games")
  sentInvites     GameInvite[] @relation("InviteSender")
  receivedInvites GameInvite[] @relation("InviteReceiver")
  gameHistoryAsPlayer1 GameHistory[] @relation("HistoryPlayer1")
  gameHistoryAsPlayer2 GameHistory[] @relation("HistoryPlayer2")
  
  @@index([username])
  @@index([elo])
}

model Game {
  id        String   @id @default(uuid())
  
  player1Id String
  player1   User     @relation("Player1Games", fields: [player1Id], references: [id])
  
  player2Id String
  player2   User     @relation("Player2Games", fields: [player2Id], references: [id])
  
  board     String   @default("         ") // 9 characters representing the board
  currentTurn String  // player1Id or player2Id
  status    GameStatus @default(IN_PROGRESS)
  winnerId  String?
  
  moveTimeLimit Int    @default(30) // seconds
  lastMoveAt    DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([player1Id])
  @@index([player2Id])
  @@index([status])
}

model GameInvite {
  id        String   @id @default(uuid())
  
  senderId  String
  sender    User     @relation("InviteSender", fields: [senderId], references: [id])
  
  receiverId String
  receiver   User    @relation("InviteReceiver", fields: [receiverId], references: [id])
  
  status    InviteStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
}

model GameHistory {
  id        String   @id @default(uuid())
  
  player1Id String
  player1   User     @relation("HistoryPlayer1", fields: [player1Id], references: [id])
  
  player2Id String
  player2   User     @relation("HistoryPlayer2", fields: [player2Id], references: [id])
  
  winnerId  String?
  result    GameResult
  finalBoard String
  
  movesCount Int
  duration   Int // in seconds
  
  player1EloChange Int @default(0)
  player2EloChange Int @default(0)
  
  createdAt DateTime @default(now())
  
  @@index([player1Id])
  @@index([player2Id])
  @@index([createdAt])
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum GameResult {
  PLAYER1_WIN
  PLAYER2_WIN
  DRAW
  ABANDONED
}
